// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "vec.ih"

//! a 1-d float bounding box (ie, a range<float>
struct box1f
{
  float lower;
  float upper;
};

//! a 2-d float bounding box
struct box2f
{
  vec2f lower;
  vec2f upper;
};

//! a 2-d integer bounding box
struct box2i
{
  vec2i lower;
  vec2i upper;
};

//! a 3-d float bounding box
struct box3f
{
  vec3f lower;
  vec3f upper;
};

//! a 3-d int bounding box
struct box3i
{
  vec3i lower;
  vec3i upper;
};

//! a 3-d float bounding box with aligned vec3f coordinates
struct box3fa
{
  vec3f lower;
  int32 align0;
  vec3f upper;
  int32 align1;
};

//! a 4-d float bounding box
struct box4f
{
  vec4f lower;
  vec4f upper;
};

// -------------------------------------------------------
// all box1f operations
// -------------------------------------------------------

#define MAKE_BOX1F_uv(univary)                                       \
  inline univary box1f make_box1f(const univary float f)             \
  {                                                                  \
    univary box1f bb;                                                \
    bb.lower = bb.upper = f;                                         \
    return bb;                                                       \
  }                                                                  \
                                                                     \
  inline univary box1f make_box1f(const univary float lo,            \
                                  const univary float hi)            \
  {                                                                  \
    univary box1f bb;                                                \
    bb.lower = lo;                                                   \
    bb.upper = hi;                                                   \
    return bb;                                                       \
  }                                                                  \
                                                                     \
  inline univary float box_size(const univary box1f &bb)             \
  {                                                                  \
    return bb.upper - bb.lower;                                      \
  }                                                                  \
                                                                     \
  inline univary box1f box_extend(const univary box1f &a,            \
                                  const univary box1f &b)            \
  {                                                                  \
    return make_box1f(min(a.lower, b.lower), max(a.upper, b.upper)); \
  }                                                                  \
                                                                     \
  inline univary bool isEmpty(const univary box1f &bb)               \
  {                                                                  \
    return bb.upper < bb.lower;                                      \
  }

MAKE_BOX1F_uv(uniform) MAKE_BOX1F_uv(varying)
#undef MAKE_BOX1F_uv

// -------------------------------------------------------
// box2 'constructors'
// -------------------------------------------------------

#define MAKE_BOX_CONSTRUCTORS_uv_2T_fromVec2(univary, Tabb, otherT)           \
  inline univary box2##Tabb make_box2##Tabb(const univary vec2##otherT lower, \
                                            const univary vec2##otherT upper) \
  {                                                                           \
    univary box2##Tabb bb;                                                    \
    bb.lower.x = lower.x;                                                     \
    bb.lower.y = lower.y;                                                     \
    bb.upper.x = upper.x;                                                     \
    bb.upper.y = upper.y;                                                     \
    return bb;                                                                \
  }

#define MAKE_BOX_CONSTRUCTORS_uv_2T_fromBox2(univary, Tabb, otherT)           \
  inline univary box2##Tabb make_box2##Tabb(const univary box2##otherT other) \
  {                                                                           \
    univary box2##Tabb bb;                                                    \
    bb.lower.x = other.lower.x;                                               \
    bb.lower.y = other.lower.y;                                               \
    bb.upper.x = other.upper.x;                                               \
    bb.upper.y = other.upper.y;                                               \
    return bb;                                                                \
  }

#define MAKE_BOX_CONSTRUCTORS_uv_2T_empty(Tabb)                             \
  inline uniform box2##Tabb make_box2##Tabb##_empty()                       \
  {                                                                         \
    return make_box2##Tabb(make_vec2##Tabb(inf), make_vec2##Tabb(neg_inf)); \
  }

#define MAKE_BOX_CONSTRUCTORS_uv_2T(univary, Tabb)               \
  MAKE_BOX_CONSTRUCTORS_uv_2T_fromVec2(univary, Tabb, f)         \
      MAKE_BOX_CONSTRUCTORS_uv_2T_fromVec2(univary, Tabb, i)     \
                                                                 \
          MAKE_BOX_CONSTRUCTORS_uv_2T_fromBox2(univary, Tabb, f) \
              MAKE_BOX_CONSTRUCTORS_uv_2T_fromBox2(univary, Tabb, i)

#define MAKE_BOX_CONSTRUCTORS_uv_2(univary) \
  MAKE_BOX_CONSTRUCTORS_uv_2T(univary, i)   \
      MAKE_BOX_CONSTRUCTORS_uv_2T(univary, f)

#define MAKE_BOX_CONSTRUCTORS_uv(univary) MAKE_BOX_CONSTRUCTORS_uv_2(univary)

    MAKE_BOX_CONSTRUCTORS_uv(uniform) MAKE_BOX_CONSTRUCTORS_uv(varying)
        MAKE_BOX_CONSTRUCTORS_uv_2T_empty(f)

#undef MAKE_BOX_CONSTRUCTORS_uv_2T_fromVec2
#undef MAKE_BOX_CONSTRUCTORS_uv_2T_fromBox2
#undef MAKE_BOX_CONSTRUCTORS_uv_2T_empty
#undef MAKE_BOX_CONSTRUCTORS_uv_2T
#undef MAKE_BOX_CONSTRUCTORS_uv_2
#undef MAKE_BOX_CONSTRUCTORS_uv

// -------------------------------------------------------
// box3 'constructors'
// -------------------------------------------------------

#define MAKE_BOX_CONSTRUCTORS_uv_3T_fromVec3(univary, Tabb, otherT)           \
  inline univary box3##Tabb make_box3##Tabb(const univary vec3##otherT lower, \
                                            const univary vec3##otherT upper) \
  {                                                                           \
    univary box3##Tabb bb;                                                    \
    bb.lower.x = lower.x;                                                     \
    bb.lower.y = lower.y;                                                     \
    bb.lower.z = lower.z;                                                     \
    bb.upper.x = upper.x;                                                     \
    bb.upper.y = upper.y;                                                     \
    bb.upper.z = upper.z;                                                     \
    return bb;                                                                \
  }

#define MAKE_BOX_CONSTRUCTORS_uv_3T_fromBox3(univary, Tabb, otherT)           \
  inline univary box3##Tabb make_box3##Tabb(const univary box3##otherT other) \
  {                                                                           \
    univary box3##Tabb bb;                                                    \
    bb.lower.x = other.lower.x;                                               \
    bb.lower.y = other.lower.y;                                               \
    bb.lower.z = other.lower.z;                                               \
    bb.upper.x = other.upper.x;                                               \
    bb.upper.y = other.upper.y;                                               \
    bb.upper.z = other.upper.z;                                               \
    return bb;                                                                \
  }

#define MAKE_BOX_CONSTRUCTORS_uv_3T_empty(Tabb)                   \
  inline uniform box3##Tabb make_box3##Tabb##_empty()             \
  {                                                               \
    return make_box3##Tabb(make_vec3f(inf), make_vec3f(neg_inf)); \
  }

#define MAKE_BOX_CONSTRUCTORS_uv_3T(univary, Tabb)                    \
  MAKE_BOX_CONSTRUCTORS_uv_3T_fromVec3(univary, Tabb, f)              \
      MAKE_BOX_CONSTRUCTORS_uv_3T_fromVec3(univary, Tabb, i)          \
                                                                      \
          MAKE_BOX_CONSTRUCTORS_uv_3T_fromBox3(univary, Tabb, f)      \
              MAKE_BOX_CONSTRUCTORS_uv_3T_fromBox3(univary, Tabb, fa) \
                  MAKE_BOX_CONSTRUCTORS_uv_3T_fromBox3(univary, Tabb, i)

#define MAKE_BOX_CONSTRUCTORS_uv_3(univary)                            \
  MAKE_BOX_CONSTRUCTORS_uv_3T(univary, i) MAKE_BOX_CONSTRUCTORS_uv_3T( \
      univary, f) MAKE_BOX_CONSTRUCTORS_uv_3T(univary, fa)

#define MAKE_BOX_CONSTRUCTORS_uv(univary) MAKE_BOX_CONSTRUCTORS_uv_3(univary)

            MAKE_BOX_CONSTRUCTORS_uv(uniform) MAKE_BOX_CONSTRUCTORS_uv(varying)
                MAKE_BOX_CONSTRUCTORS_uv_3T_empty(f)
                    MAKE_BOX_CONSTRUCTORS_uv_3T_empty(fa)

#undef MAKE_BOX_CONSTRUCTORS_uv_3T_fromVec3
#undef MAKE_BOX_CONSTRUCTORS_uv_3T_fromBox3
#undef MAKE_BOX_CONSTRUCTORS_uv_3T_empty
#undef MAKE_BOX_CONSTRUCTORS_uv_3T
#undef MAKE_BOX_CONSTRUCTORS_uv_3
#undef MAKE_BOX_CONSTRUCTORS_uv

// -------------------------------------------------------
// box 'operations'
// -------------------------------------------------------

#define BOX_OPERATIONS_uv_N_T(univary, N, T)                         \
  inline univary vec##N##T box_size(const univary box##N##T &bb)     \
  {                                                                  \
    return bb.upper - bb.lower;                                      \
  }                                                                  \
                                                                     \
  inline univary bool isEmpty(const univary box##N##T &bb)           \
  {                                                                  \
    return anyLessThan(bb.upper, bb.lower);                          \
  }                                                                  \
                                                                     \
  inline univary box##N##T box_extend(const univary box##N##T bb,    \
                                      const univary vec##N##T v)     \
  {                                                                  \
    return make_box##N##T(min(bb.lower, v), max(bb.upper, v));       \
  }                                                                  \
                                                                     \
  inline univary box##N##T box_extend(const univary box##N##T bb,    \
                                      const univary box##N##T other) \
  {                                                                  \
    return make_box##N##T(min(bb.lower, other.lower),                \
                          max(bb.upper, other.upper));               \
  }

#define BOX_OPERATIONS_uv_3fa(univary)                         \
  inline univary box3fa box_extend(const univary box3fa bb,    \
                                   const univary vec3f v)      \
  {                                                            \
    return make_box3fa(min(bb.lower, v), max(bb.upper, v));    \
  }                                                            \
                                                               \
  inline univary box3fa box_extend(const univary box3fa bb,    \
                                   const univary box3fa other) \
  {                                                            \
    return make_box3fa(min(bb.lower, other.lower),             \
                       max(bb.upper, other.upper));            \
  }

#define BOX_OPERATIONS_uv_N(univary, N) \
  BOX_OPERATIONS_uv_N_T(univary, N, i) BOX_OPERATIONS_uv_N_T(univary, N, f)

#define BOX_OPERATIONS_uv(univary)                                \
  BOX_OPERATIONS_uv_N(univary, 2) BOX_OPERATIONS_uv_N(univary, 3) \
      BOX_OPERATIONS_uv_3fa(univary)

                        BOX_OPERATIONS_uv(uniform) BOX_OPERATIONS_uv(varying)

#undef BOX_OPERATIONS_uv_N_T
#undef BOX_OPERATIONS_uv_N
#undef BOX_OPERATIONS_uv

                            inline bool box_contains(const uniform box3f &bbox,
                                                     const varying vec3f &p)
{
  return p.x >= bbox.lower.x && p.y >= bbox.lower.y && p.z >= bbox.lower.z &&
         p.x <= bbox.upper.x && p.y <= bbox.upper.y && p.z <= bbox.upper.z;
}


// this is just a renaming - in some cases the code reads cleaner if we're
// talking about 'regions' than about boxes
typedef box1f range1f;
typedef box2i range2i;

inline void extend(uniform range1f &r, uniform float v)
{
  r.lower = min(r.lower, v);
  r.upper = max(r.upper, v);
}

inline void extend(uniform range1f &r, varying float v)
{
  r.lower = min(r.lower, reduce_min(v));
  r.upper = max(r.upper, reduce_max(v));
}

inline void extend(range1f &r, float v)
{
  r.lower = min(r.lower, v);
  r.upper = max(r.upper, v);
}
