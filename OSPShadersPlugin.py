# OSPShadersPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Sat Sep 4 20:06:32 UTC+0500 2021 by Shekn
# 
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as c

null = None
false = 0
true = 1
app = Application

def XSILoadPlugin(in_reg):
    in_reg.Author = "Shekn Itrch"
    in_reg.Name = "OSPShadersPlugin"
    in_reg.Major = 1
    in_reg.Minor = 0

    #RegistrationInsertionPoint - do not remove this line
    in_reg.RegisterShader("Obj", 1, 0)
    in_reg.RegisterShader("Principled", 1, 0)
    in_reg.RegisterShader("CarPaint", 1, 0)
    in_reg.RegisterShader("Metal", 1, 0)
    in_reg.RegisterShader("Alloy", 1, 0)
    in_reg.RegisterShader("Glass", 1, 0)
    in_reg.RegisterShader("ThinGlass", 1, 0)
    in_reg.RegisterShader("MetallicPaint", 1, 0)
    in_reg.RegisterShader("Luminous", 1, 0)

    return true

def XSIUnloadPlugin(in_reg):
    strPluginName = in_reg.Name
    app.LogMessage(str(strPluginName) + str(" has been unloaded."), c.siVerbose)
    return true


def add_output_closure(shader_def, name="closure"):
    param_options = XSIFactory.CreateShaderParamDefOptions()
    param_options.SetLongName(name)
    params = shader_def.OutputParamDefs
    param_def = params.AddParamDef2(name, c.siShaderDataTypeColor4, param_options)
    param_def.MainPort = False


def add_input_color(param_options, params, default_value=1, name="color"):
    param_options.SetDefaultValue(default_value)
    params.AddParamDef(name, c.siShaderDataTypeColor3, param_options)


def add_input_float(param_options, params, default_value=0, name="float", vis_min=None, vis_max=None):
    param_options.SetDefaultValue(default_value)
    if vis_min is not None and vis_max is not None:
        param_options.SetSoftLimit(vis_min, vis_max)
    params.AddParamDef(name, c.siShaderDataTypeScalar, param_options)


def add_input_boolean(param_options, params, default_value=True, name="boolean"):
    param_options.SetDefaultValue(default_value)
    params.AddParamDef(name, c.siShaderDataTypeBoolean, param_options)


def add_input_vector(param_options, params, default_value=0, name="vector", min_visible=None, max_visible=None):
    param_options.SetDefaultValue(default_value)
    if min_visible is not None and max_visible is not None:
        param_options.SetSoftLimit(min_visible, max_visible)
    params.AddParamDef(name, c.siShaderDataTypeVector3, param_options)


def standart_pram_options():
    param_options = XSIFactory.CreateShaderParamDefOptions()
    param_options.SetAnimatable(True)
    param_options.SetTexturable(True)
    param_options.SetReadOnly(False)
    param_options.SetInspectable(True)
    return param_options

#--------------------------------------------------------
#---------------------Obj--------------------------------
def OSPShadersPlugin_Obj_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "ospRay")
    in_ctxt.SetAttribute("DisplayName", "ospObj")
    return True


def OSPShadersPlugin_Obj_1_0_Define(in_ctxt):
    shaderDef = in_ctxt.GetAttribute("Definition")
    shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shaderDef.InputParamDefs

    # parameters
    add_input_color(standart_pram_options(), params, 0.8, "kd")
    add_input_color(standart_pram_options(), params, 0.0, "ks")
    add_input_float(standart_pram_options(), params, 10.0, "ns", 0.0, 20.0)
    add_input_float(standart_pram_options(), params, 1.0, "d", 0.0, 1.0)
    add_input_color(standart_pram_options(), params, 0.0, "tf")
    add_input_color(standart_pram_options(), params, 0.0, "map_bump")

    # Output Parameter: out
    add_output_closure(shaderDef, "out")

    # next init ppg
    ppgLayout = shaderDef.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("kd", "Diffuse Color")
    ppgLayout.AddItem("ks", "Specular Color")
    ppgLayout.AddItem("ns", "Shininess")
    ppgLayout.AddItem("d", "Opacity")
    ppgLayout.AddItem("tf", "Transparency Filter")
    ppgLayout.AddItem("map_bump", "Normal Map")
    ppgLayout.EndGroup()

    # Renderer definition
    rendererDef = shaderDef.AddRendererDef("ospRay")
    rendererDef.SymbolName = "Obj"

    return True


#--------------------------------------------------------
#------------------Principled----------------------------
def OSPShadersPlugin_Principled_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "ospRay")
    in_ctxt.SetAttribute("DisplayName", "ospPrincipled")
    return True


def OSPShadersPlugin_Principled_1_0_Define(in_ctxt):
    shaderDef = in_ctxt.GetAttribute("Definition")
    shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shaderDef.InputParamDefs

    # parameters
    add_input_color(standart_pram_options(), params, 0.8, "baseColor")
    add_input_color(standart_pram_options(), params, 1.0, "edgeColor")
    add_input_float(standart_pram_options(), params, 0.0, "metallic", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "diffuse", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "specular", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "ior", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 0.0, "transmission", 0.0, 1.0)
    add_input_color(standart_pram_options(), params, 1.0, "transmissionColor")
    add_input_float(standart_pram_options(), params, 1.0, "transmissionDepth", 0.0, 4.0)
    add_input_float(standart_pram_options(), params, 0.0, "roughness", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 0.0, "anisotropy", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 0.0, "rotation", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "normal", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "baseNormal", 0.0, 4.0)
    add_input_boolean(standart_pram_options(), params, False, "thin")
    add_input_float(standart_pram_options(), params, 1.0, "thickness", 0.0, 2.0)
    add_input_float(standart_pram_options(), params, 0.0, "backlight", 0.0, 2.0)
    add_input_float(standart_pram_options(), params, 0.0, "coat", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.5, "coatIor", 0.0, 4.0)
    add_input_color(standart_pram_options(), params, 1.0, "coatColor")
    add_input_float(standart_pram_options(), params, 1.0, "coatThickness", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 0.0, "coatRoughness", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "coatNormal", 0.0, 4.0)
    add_input_float(standart_pram_options(), params, 0.0, "sheen", 0.0, 1.0)
    add_input_color(standart_pram_options(), params, 1.0, "sheenColor")
    add_input_float(standart_pram_options(), params, 0.0, "sheenTint", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 0.2, "sheenRoughness", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "opacity", 0.0, 1.0)

    # Output Parameter: out
    add_output_closure(shaderDef, "out")

    # next init ppg
    ppgLayout = shaderDef.PPGLayout
    ppgLayout.AddGroup("Base Parameters")
    ppgLayout.AddItem("baseColor", "Base Reflectivity")
    ppgLayout.AddItem("edgeColor", "Edge Tint")
    ppgLayout.AddItem("metallic", "Metallic")
    ppgLayout.AddItem("diffuse", "Diffuse weight")
    ppgLayout.AddItem("specular", "Specular Weight")
    ppgLayout.AddItem("ior", "IOR")
    ppgLayout.AddItem("roughness", "Roughness")
    ppgLayout.AddItem("anisotropy", "Anisotropy")
    ppgLayout.AddItem("rotation", "Rotation")
    ppgLayout.AddItem("normal", "Default Normal Scale")
    ppgLayout.AddItem("baseNormal", "Base Normal Scale")
    ppgLayout.AddItem("opacity", "Opacity")
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("Transmission")
    ppgLayout.AddItem("transmission", "Weight")
    ppgLayout.AddItem("transmissionColor", "Color")
    ppgLayout.AddItem("transmissionDepth", "Depth")
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("Thickness")
    ppgLayout.AddItem("thin", "Thin or Solid")
    ppgLayout.AddItem("thickness", "Thickness")
    ppgLayout.AddItem("backlight", "Backlight")
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("Clear Coat")
    ppgLayout.AddItem("coat", "Weight")
    ppgLayout.AddItem("coatIor", "IOR")
    ppgLayout.AddItem("coatColor", " Color")
    ppgLayout.AddItem("coatThickness", "Thickness")
    ppgLayout.AddItem("coatRoughness", " Roughness")
    ppgLayout.AddItem("coatNormal", "Normal Scale")
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("Sheen")
    ppgLayout.AddItem("sheen", "Weight")
    ppgLayout.AddItem("sheenColor", "Color")
    ppgLayout.AddItem("sheenTint", "Tint")
    ppgLayout.AddItem("sheenRoughness", "Roughness")
    ppgLayout.EndGroup()

    # Renderer definition
    rendererDef = shaderDef.AddRendererDef("ospRay")
    rendererDef.SymbolName = "Principled"

    return True


#--------------------------------------------------------
#--------------------CarPaint----------------------------
def OSPShadersPlugin_CarPaint_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "ospRay")
    in_ctxt.SetAttribute("DisplayName", "ospCarPaint")
    return True


def OSPShadersPlugin_CarPaint_1_0_Define(in_ctxt):
    shaderDef = in_ctxt.GetAttribute("Definition")
    shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shaderDef.InputParamDefs

    # parameters
    add_input_color(standart_pram_options(), params, 0.8, "baseColor")
    add_input_float(standart_pram_options(), params, 0.0, "roughness", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "normal", 0.0, 4.0)
    add_input_color(standart_pram_options(), params, 0.2, "flakeColor")
    add_input_float(standart_pram_options(), params, 0.0, "flakeDensity", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 100.0, "flakeScale", 0.0, 1024.0)
    add_input_float(standart_pram_options(), params, 0.3, "flakeSpread", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 0.75, "flakeJitter", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 0.3, "flakeRoughness", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "coat", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.5, "coatIor", 0.0, 4.0)
    add_input_color(standart_pram_options(), params, 1.0, "coatColor")
    add_input_float(standart_pram_options(), params, 1.0, "coatThickness", 0.0, 10.0)
    add_input_float(standart_pram_options(), params, 0.0, "coatRoughness", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.0, "coatNormal", 0.0, 1.0)
    add_input_color(standart_pram_options(), params, 1.0, "flipflopColor")
    add_input_float(standart_pram_options(), params, 1.0, "flipflopFalloff", 0.0, 1.0)

    # Output Parameter: out
    add_output_closure(shaderDef, "out")

    # next init ppg
    ppgLayout = shaderDef.PPGLayout
    ppgLayout.AddGroup("Base Parameters")
    ppgLayout.AddItem("baseColor", "Diffuse Reflectivity")
    ppgLayout.AddItem("roughness", "Roughness")
    ppgLayout.AddItem("normal", "Normal scale")
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("Flakes")
    ppgLayout.AddItem("flakeColor", "Color")
    ppgLayout.AddItem("flakeDensity", "Density")
    ppgLayout.AddItem("flakeScale", "Scale")
    ppgLayout.AddItem("flakeSpread", "Spread")
    ppgLayout.AddItem("flakeJitter", "Randomness")
    ppgLayout.AddItem("flakeRoughness", "Roughness")
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("Clear Coat")
    ppgLayout.AddItem("coat", "Weight")
    ppgLayout.AddItem("coatIor", "IOR")
    ppgLayout.AddItem("coatColor", "Color")
    ppgLayout.AddItem("coatThickness", "Thickness")
    ppgLayout.AddItem("coatRoughness", "Roughness")
    ppgLayout.AddItem("coatNormal", "Normal Scale")
    ppgLayout.EndGroup()

    ppgLayout.AddGroup("Flip Flop")
    ppgLayout.AddItem("flipflopColor", "Color")
    ppgLayout.AddItem("flipflopFalloff", "Falloff")
    ppgLayout.EndGroup()

    # Renderer definition
    rendererDef = shaderDef.AddRendererDef("ospRay")
    rendererDef.SymbolName = "CarPaint"

    return True


#--------------------------------------------------------
#--------------------Metal-------------------------------
def OSPShadersPlugin_Metal_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "ospRay")
    in_ctxt.SetAttribute("DisplayName", "ospMetal")
    return True


def OSPShadersPlugin_Metal_1_0_Define(in_ctxt):
    shaderDef = in_ctxt.GetAttribute("Definition")
    shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shaderDef.InputParamDefs

    # parameters
    add_input_vector(standart_pram_options(), params, 0.2, "ior")
    add_input_vector(standart_pram_options(), params, [0.07, 0.37, 1.5], "eta", [0.0, 0.0, 0.0], [1.0, 1.0, 1.0])
    add_input_vector(standart_pram_options(), params, [3.7, 2.3, 1.7], "k", [0.0, 0.0, 0.0], [5.0, 5.0, 5.0])
    add_input_float(standart_pram_options(), params, 0.1, "roughness", 0.0, 1.0)

    # Output Parameter: out
    add_output_closure(shaderDef, "out")

    # next init ppg
    ppgLayout = shaderDef.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("ior", "IOR")
    ppgLayout.AddItem("eta", "Real Part")
    ppgLayout.AddItem("k", "Imaginary Part")
    ppgLayout.AddItem("roughness", "Roughness")
    ppgLayout.EndGroup()

    # Renderer definition
    rendererDef = shaderDef.AddRendererDef("ospRay")
    rendererDef.SymbolName = "Metal"

    return True


#--------------------------------------------------------
#--------------------Alloy-------------------------------
def OSPShadersPlugin_Alloy_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "ospRay")
    in_ctxt.SetAttribute("DisplayName", "ospAlloy")
    return True


def OSPShadersPlugin_Alloy_1_0_Define(in_ctxt):
    shaderDef = in_ctxt.GetAttribute("Definition")
    shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shaderDef.InputParamDefs

    # parameters
    add_input_color(standart_pram_options(), params, 0.9, "color")
    add_input_color(standart_pram_options(), params, 1.0, "edgeColor")
    add_input_float(standart_pram_options(), params, 0.1, "roughness", 0.0, 1.0)

    # Output Parameter: out
    add_output_closure(shaderDef, "out")

    # next init ppg
    ppgLayout = shaderDef.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("color", "Color")
    ppgLayout.AddItem("edgeColor", "Edge Color")
    ppgLayout.AddItem("roughness", "Roughness")
    ppgLayout.EndGroup()

    # Renderer definition
    rendererDef = shaderDef.AddRendererDef("ospRay")
    rendererDef.SymbolName = "Alloy"

    return True


#--------------------------------------------------------
#--------------------Glass-------------------------------
def OSPShadersPlugin_Glass_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "ospRay")
    in_ctxt.SetAttribute("DisplayName", "ospGlass")
    return True


def OSPShadersPlugin_Glass_1_0_Define(in_ctxt):
    shaderDef = in_ctxt.GetAttribute("Definition")
    shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shaderDef.InputParamDefs

    # parameters
    add_input_float(standart_pram_options(), params, 1.5, "eta", 0.0, 4.0)
    add_input_color(standart_pram_options(), params, 1.0, "attenuationColor")
    add_input_float(standart_pram_options(), params, 1.0, "attenuationDistance", 0.0, 10.0)

    # Output Parameter: out
    add_output_closure(shaderDef, "out")

    # next init ppg
    ppgLayout = shaderDef.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("eta", "IOR")
    ppgLayout.AddItem("attenuationColor", "Color")
    ppgLayout.AddItem("attenuationDistance", "Distance")
    ppgLayout.EndGroup()

    # Renderer definition
    rendererDef = shaderDef.AddRendererDef("ospRay")
    rendererDef.SymbolName = "Glass"

    return True


#--------------------------------------------------------
#--------------------ThinGlass---------------------------
def OSPShadersPlugin_ThinGlass_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "ospRay")
    in_ctxt.SetAttribute("DisplayName", "ospThinGlass")
    return True


def OSPShadersPlugin_ThinGlass_1_0_Define(in_ctxt):
    shaderDef = in_ctxt.GetAttribute("Definition")
    shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shaderDef.InputParamDefs

    # parameters
    add_input_float(standart_pram_options(), params, 1.5, "eta", 0.0, 4.0)
    add_input_color(standart_pram_options(), params, 1.0, "attenuationColor")
    add_input_float(standart_pram_options(), params, 1.0, "attenuationDistance", 0.0, 10.0)
    add_input_float(standart_pram_options(), params, 1.0, "thickness", 0.0, 10.0)

    # Output Parameter: out
    add_output_closure(shaderDef, "out")

    # next init ppg
    ppgLayout = shaderDef.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("eta", "IOR")
    ppgLayout.AddItem("attenuationColor", "Color")
    ppgLayout.AddItem("attenuationDistance", "Distance")
    ppgLayout.AddItem("thickness", "Thickness")
    ppgLayout.EndGroup()

    # Renderer definition
    rendererDef = shaderDef.AddRendererDef("ospRay")
    rendererDef.SymbolName = "ThinGlass"

    return True


#--------------------------------------------------------
#--------------------MetallicPaint-----------------------
def OSPShadersPlugin_MetallicPaint_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "ospRay")
    in_ctxt.SetAttribute("DisplayName", "ospMetallicPaint")
    return True


def OSPShadersPlugin_MetallicPaint_1_0_Define(in_ctxt):
    shaderDef = in_ctxt.GetAttribute("Definition")
    shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shaderDef.InputParamDefs

    # parameters
    add_input_color(standart_pram_options(), params, 0.8, "baseColor")
    add_input_float(standart_pram_options(), params, 0.3, "flakeAmount", 0.0, 1.0)
    add_input_color(standart_pram_options(), params, 0.2, "flakeColor")
    add_input_float(standart_pram_options(), params, 0.5, "flakeSpread", 0.0, 1.0)
    add_input_float(standart_pram_options(), params, 1.5, "eta", 0.0, 4.0)

    # Output Parameter: out
    add_output_closure(shaderDef, "out")

    # next init ppg
    ppgLayout = shaderDef.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("baseColor", "Color")
    ppgLayout.AddItem("flakeAmount", "Flakes amount")
    ppgLayout.AddItem("flakeColor", "Flakes Color")
    ppgLayout.AddItem("flakeSpread", "Flake Spread")
    ppgLayout.AddItem("eta", "IOR")
    ppgLayout.EndGroup()

    # Renderer definition
    rendererDef = shaderDef.AddRendererDef("ospRay")
    rendererDef.SymbolName = "MetallicPaint"

    return True


#--------------------------------------------------------
#--------------------Luminous----------------------------
def OSPShadersPlugin_Luminous_1_0_DefineInfo(in_ctxt):
    in_ctxt.SetAttribute("Category", "ospRay")
    in_ctxt.SetAttribute("DisplayName", "ospLuminous")
    return True


def OSPShadersPlugin_Luminous_1_0_Define(in_ctxt):
    shaderDef = in_ctxt.GetAttribute("Definition")
    shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)

    # Input Parameter: input
    params = shaderDef.InputParamDefs

    # parameters
    add_input_color(standart_pram_options(), params, 1.0, "color")
    add_input_float(standart_pram_options(), params, 1.0, "intensity", 0.0, 10.0)
    add_input_float(standart_pram_options(), params, 1.0, "transparency", 0.0, 1.0)

    # Output Parameter: out
    add_output_closure(shaderDef, "out")

    # next init ppg
    ppgLayout = shaderDef.PPGLayout
    ppgLayout.AddGroup("Parameters")
    ppgLayout.AddItem("color", "Color")
    ppgLayout.AddItem("intensity", "Intensity")
    ppgLayout.AddItem("transparency", "Transparency")
    ppgLayout.EndGroup()

    # Renderer definition
    rendererDef = shaderDef.AddRendererDef("ospRay")
    rendererDef.SymbolName = "Luminous"

    return True